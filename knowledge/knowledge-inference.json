{
  "title": "Понятие вывода на знаниях",
  "description": "Теория и методы логического вывода в интеллектуальных системах",
  "keywords": ["вывод", "знания", "логика", "рассуждения", "умозаключения"],
  "questions": [
    {
      "question": "Что такое вывод на знаниях?",
      "answer": "**Вывод на знаниях** — процесс получения новых знаний из уже имеющихся с помощью логических правил и механизмов рассуждения.\n\n**Основные компоненты:**\n- **База знаний:** исходные факты и правила\n- **Механизм вывода:** алгоритмы рассуждения\n- **Цель вывода:** что нужно доказать или найти\n- **Результат:** новые факты или заключения\n\n**Типы вывода:**\n\n**1. Дедуктивный вывод:**\n- От общего к частному\n- Гарантированно правильные заключения\n- Пример: \"Все люди смертны. Сократ — человек. Следовательно, Сократ смертен.\"\n\n**2. Индуктивный вывод:**\n- От частного к общему\n- Вероятностные заключения\n- Пример: \"Все вороны, которых я видел, черные. Следовательно, все вороны черные.\"\n\n**3. Абдуктивный вывод:**\n- Поиск наилучшего объяснения\n- Гипотетические заключения\n- Пример: \"Трава мокрая. Возможно, шел дождь.\"\n\n**4. Аналогический вывод:**\n- По аналогии с известными случаями\n- Перенос знаний между областями\n- Пример: \"Сердце работает как насос.\"",
      "keywords": ["вывод", "дедуктивный", "индуктивный", "абдуктивный", "аналогический", "рассуждения"]
    },
    {
      "question": "Какие методы дедуктивного вывода используются в интеллектуальных системах?",
      "answer": "**Методы дедуктивного вывода:**\n\n**1. Правило модус поненс:**\n```\nЕсли A → B и A истинно, то B истинно\n```\nПример: \"Если идет дождь, то улица мокрая. Идет дождь. Следовательно, улица мокрая.\"\n\n**2. Правило модус толленс:**\n```\nЕсли A → B и ¬B истинно, то ¬A истинно\n```\nПример: \"Если идет дождь, то улица мокрая. Улица не мокрая. Следовательно, дождь не идет.\"\n\n**3. Цепочка рассуждений:**\n```\nA → B, B → C, следовательно A → C\n```\nПример: \"Если холодно, то нужно надеть куртку. Если надеть куртку, то будет тепло. Следовательно, если холодно, то будет тепло.\"\n\n**4. Универсальная спецификация:**\n```\n∀x P(x) → P(a) для любого a\n```\nПример: \"Все птицы летают. Воробей — птица. Следовательно, воробей летает.\"\n\n**5. Экзистенциальная генерализация:**\n```\nP(a) → ∃x P(x)\n```\nПример: \"Сократ — человек. Следовательно, существует человек.\"\n\n**6. Резолюция:**\n- Приведение к конъюнктивной нормальной форме\n- Поиск противоречий\n- Автоматическое доказательство теорем\n- Основа для логического программирования",
      "keywords": ["дедуктивный", "модус поненс", "модус толленс", "цепочка", "универсальная", "резолюция"]
    },
    {
      "question": "Как работает механизм вывода в продукционных системах?",
      "answer": "**Механизм вывода в продукционных системах:**\n\n**Основные стратегии:**\n\n**1. Прямой вывод (Forward Chaining):**\n- Начинается с известных фактов\n- Применяет правила для получения новых фактов\n- Продолжается до достижения цели\n- Подходит для задач планирования и синтеза\n\n**Алгоритм:**\n```\n1. Инициализировать рабочую память фактами\n2. Пока есть применимые правила:\n   a. Выбрать правило для применения\n   b. Добавить заключение в рабочую память\n   c. Обновить список применимых правил\n3. Вернуть результат\n```\n\n**2. Обратный вывод (Backward Chaining):**\n- Начинается с целевого утверждения\n- Ищет правила, которые могут его доказать\n- Рекурсивно проверяет условия\n- Эффективен для задач диагностики\n\n**Алгоритм:**\n```\n1. Если цель уже в рабочей памяти, вернуть true\n2. Найти правила, заключения которых содержат цель\n3. Для каждого правила:\n   a. Попытаться доказать все условия\n   b. Если все условия доказаны, добавить заключение\n4. Вернуть результат\n```\n\n**3. Смешанный вывод:**\n- Комбинация прямого и обратного\n- Начинается с обеих сторон\n- Встречается в середине\n- Оптимален для сложных задач\n\n**Управление конфликтами:**\n- **Порядок правил:** приоритет по порядку\n- **Специфичность:** более специфичные правила\n- **Релевантность:** соответствие контексту\n- **Время:** последние добавленные правила",
      "keywords": ["продукционные", "прямой", "обратный", "смешанный", "конфликты", "стратегии"]
    },
    {
      "question": "Что такое нечеткий вывод?",
      "answer": "**Нечеткий вывод** — метод рассуждений с использованием нечеткой логики для работы с неточной и неопределенной информацией.\n\n**Основные концепции:**\n\n**1. Нечеткие множества:**\n- Элементы принадлежат множеству с определенной степенью\n- Функция принадлежности μ(x) ∈ [0,1]\n- Пример: \"Высокий человек\" — нечеткое множество\n\n**2. Лингвистические переменные:**\n- Переменные со значениями-словами\n- Пример: Температура = {холодная, прохладная, теплая, горячая}\n- Каждое значение — нечеткое множество\n\n**3. Нечеткие правила:**\n```\nЕСЛИ температура = высокая И влажность = высокая\nТО дискомфорт = сильный\n```\n\n**Алгоритм нечеткого вывода (Mamdani):**\n\n**1. Фаззификация:**\n- Преобразование четких входных значений в нечеткие\n- Определение степени принадлежности к термам\n\n**2. Применение правил:**\n- Вычисление степени истинности каждого правила\n- Использование операций min (И) или max (ИЛИ)\n\n**3. Агрегация:**\n- Объединение результатов всех правил\n- Получение нечеткого выходного множества\n\n**4. Дефаззификация:**\n- Преобразование нечеткого результата в четкое число\n- Методы: центроид, максимум, среднее\n\n**Применение:**\n- Системы управления\n- Экспертные системы\n- Распознавание образов\n- Принятие решений в условиях неопределенности",
      "keywords": ["нечеткий", "логика", "множества", "лингвистические", "фаззификация", "дефаззификация"]
    }
  ],
  "examples": [
    {
      "title": "Система диагностики неисправностей автомобиля",
      "description": "Использует обратный вывод: от симптома к возможным причинам, проверяя условия правил"
    },
    {
      "title": "Нечеткий регулятор температуры в кондиционере",
      "description": "Применяет нечеткую логику для плавного регулирования температуры на основе субъективных понятий 'холодно' и 'жарко'"
    }
  ]
}
