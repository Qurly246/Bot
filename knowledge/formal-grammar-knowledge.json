{
  "title": "Формальная грамматика как способ представления знаний в продукционной МПЗ",
  "description": "Использование формальных грамматик для структурирования знаний в продукционных системах",
  "keywords": ["формальная грамматика", "продукционная", "МПЗ", "синтаксис", "правила", "представление"],
  "questions": [
    {
      "question": "Что такое формальная грамматика в контексте представления знаний?",
      "answer": "**Формальная грамматика** — математическая модель для описания синтаксиса языка представления знаний в продукционных системах.\n\n**Компоненты формальной грамматики:**\n\n**1. Терминальные символы (T):**\n- Базовые элементы языка\n- Не могут быть разложены дальше\n- Примеры: числа, строки, операторы\n\n**2. Нетерминальные символы (N):**\n- Переменные, представляющие конструкции\n- Могут быть заменены на другие символы\n- Примеры: <условие>, <действие>, <правило>\n\n**3. Правила вывода (P):**\n- Описывают, как заменять нетерминалы\n- Форма: A → α, где A ∈ N, α ∈ (N ∪ T)*\n- Пример: <правило> → ЕСЛИ <условие> ТО <действие>\n\n**4. Начальный символ (S):**\n- Корень грамматики\n- С него начинается порождение\n- Пример: <система_правил>\n\n**Пример грамматики для продукционных правил:**\n```\nG = (N, T, P, S)\nгде:\nN = {<правило>, <условие>, <действие>, <атом>}\nT = {ЕСЛИ, ТО, И, ИЛИ, НЕ, =, >, <, (, )}\nS = <правило>\n\nP = {\n  <правило> → ЕСЛИ <условие> ТО <действие>\n  <условие> → <атом> | <условие> И <условие> | <условие> ИЛИ <условие>\n  <действие> → <атом>\n  <атом> → переменная оператор значение\n}\n```",
      "keywords": ["формальная грамматика", "терминальные", "нетерминальные", "правила вывода", "начальный символ"]
    },
    {
      "question": "Как формальные грамматики используются в продукционных системах?",
      "answer": "**Применение формальных грамматик в продукционных системах:**\n\n**1. Синтаксический анализ правил:**\n- **Парсинг:** проверка корректности синтаксиса правил\n- **Валидация:** соответствие правилам грамматики\n- **Ошибки:** обнаружение синтаксических ошибок\n- **Автодополнение:** предложение корректных конструкций\n\n**2. Генерация правил:**\n- **Шаблоны:** создание правил по шаблонам\n- **Автоматизация:** генерация правил из данных\n- **Консистентность:** обеспечение единообразия\n- **Оптимизация:** улучшение структуры правил\n\n**3. Трансформация знаний:**\n- **Нормализация:** приведение к стандартной форме\n- **Упрощение:** удаление избыточности\n- **Оптимизация:** улучшение производительности\n- **Конвертация:** преобразование между форматами\n\n**4. Верификация системы:**\n- **Проверка целостности:** отсутствие противоречий\n- **Анализ зависимостей:** связи между правилами\n- **Циклы:** обнаружение бесконечных циклов\n- **Доступность:** проверка достижимости целей\n\n**Примеры использования:**\n\n**Парсинг правила:**\n```\nВход: \"ЕСЛИ возраст > 18 И доход >= 50000 ТО одобрить_кредит\"\n\nГрамматика:\n<правило> → ЕСЛИ <условие> ТО <действие>\n<условие> → <атом> И <атом>\n<атом> → переменная оператор значение\n\nРезультат: Корректное правило\n```\n\n**Генерация правил:**\n```\nШаблон: ЕСЛИ <условие1> И <условие2> ТО <действие>\n\nВарианты:\n- ЕСЛИ температура > 30 И влажность > 80 ТО включить_кондиционер\n- ЕСЛИ скорость > 120 И дорога = мокрая ТО снизить_скорость\n```",
      "keywords": ["парсинг", "генерация", "трансформация", "верификация", "валидация", "нормализация"]
    },
    {
      "question": "Какие типы грамматик используются для представления знаний?",
      "answer": "**Типы грамматик для представления знаний:**\n\n**1. Контекстно-свободные грамматики (КСГ):**\n- **Характеристика:** правила вида A → α\n- **Применение:** большинство языков программирования\n- **Преимущества:** эффективный парсинг\n- **Ограничения:** не могут описать все языки\n\n**Пример КСГ для правил:**\n```\n<правило> → ЕСЛИ <условие> ТО <действие>\n<условие> → <атом> | <условие> И <условие>\n<атом> → переменная оператор значение\n<действие> → команда | <действие> И <действие>\n```\n\n**2. Контекстно-зависимые грамматики (КЗГ):**\n- **Характеристика:** правила вида αAβ → αγβ\n- **Применение:** сложные языки с контекстом\n- **Преимущества:** большая выразительность\n- **Недостатки:** сложность парсинга\n\n**3. Атрибутные грамматики:**\n- **Характеристика:** грамматика + атрибуты + семантические правила\n- **Применение:** семантический анализ\n- **Преимущества:** разделение синтаксиса и семантики\n- **Пример:** проверка типов в правилах\n\n**4. Двухуровневые грамматики:**\n- **Характеристика:** метаграмматика + объектная грамматика\n- **Применение:** генерация языков\n- **Преимущества:** гибкость и расширяемость\n- **Пример:** создание DSL для предметных областей\n\n**5. Унифицированные грамматики:**\n- **Характеристика:** объединение синтаксиса и семантики\n- **Применение:** логическое программирование\n- **Преимущества:** естественное представление знаний\n- **Пример:** DCG (Definite Clause Grammar) в Prolog",
      "keywords": ["контекстно-свободные", "контекстно-зависимые", "атрибутные", "двухуровневые", "унифицированные"]
    },
    {
      "question": "Как формальные грамматики помогают в верификации знаний?",
      "answer": "**Верификация знаний с помощью формальных грамматик:**\n\n**1. Синтаксическая проверка:**\n- **Корректность:** соответствие правилам грамматики\n- **Полнота:** наличие всех обязательных элементов\n- **Однозначность:** единственность интерпретации\n- **Консистентность:** единообразие стиля\n\n**Алгоритм проверки:**\n```\n1. Разбор правила по грамматике\n2. Проверка соответствия синтаксису\n3. Валидация семантических ограничений\n4. Анализ зависимостей между элементами\n5. Генерация отчета об ошибках\n```\n\n**2. Семантический анализ:**\n- **Типы данных:** соответствие типов переменных\n- **Области значений:** проверка допустимых значений\n- **Ссылки:** корректность ссылок на объекты\n- **Контекст:** учет контекста использования\n\n**3. Логическая проверка:**\n- **Противоречия:** поиск конфликтующих правил\n- **Избыточность:** обнаружение дублирующихся правил\n- **Циклы:** проверка на бесконечные циклы\n- **Доступность:** достижимость целей\n\n**4. Производительность:**\n- **Сложность:** анализ вычислительной сложности\n- **Оптимизация:** предложения по улучшению\n- **Кэширование:** возможности кэширования\n- **Параллелизм:** возможности параллельного выполнения\n\n**Примеры проверок:**\n\n**Синтаксическая ошибка:**\n```\nНеправильно: \"ЕСЛИ возраст > 18 ТО\" (отсутствует действие)\nПравильно: \"ЕСЛИ возраст > 18 ТО одобрить_заявку\"\n```\n\n**Семантическая ошибка:**\n```\nНеправильно: \"ЕСЛИ возраст > 'взрослый' ТО...\" (неверный тип)\nПравильно: \"ЕСЛИ возраст > 18 ТО...\"\n```\n\n**Логическая ошибка:**\n```\nПравило 1: \"ЕСЛИ A > 10 ТО B = 1\"\nПравило 2: \"ЕСЛИ A > 10 ТО B = 0\" (противоречие)\n```",
      "keywords": ["верификация", "синтаксическая", "семантическая", "логическая", "производительность", "проверка"]
    }
  ],
  "examples": [
    {
      "title": "Система валидации бизнес-правил",
      "description": "Использует формальную грамматику для проверки корректности правил ценообразования и скидок"
    },
    {
      "title": "Генератор правил для экспертной системы",
      "description": "Автоматически создает правила диагностики на основе формальной грамматики и примеров"
    }
  ]
}
